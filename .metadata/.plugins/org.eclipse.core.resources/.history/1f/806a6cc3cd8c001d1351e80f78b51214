package model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;

import org.apache.catalina.Session;

import database.DBConnection;

public class UserDAO {

	private static UserDAO instance;
	
	private UserDAO() {
		
	}

	public static UserDAO getInstance() {
		if (instance == null)
			instance = new UserDAO();
		return instance;
	}
	
	// 아이디 중복검사
	public boolean duplecateID(String id){
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		boolean result = false;
		
		String sql = "select count(*) from user where id=?";
	    try{
	    	conn = DBConnection.getConnection();
	    	pstmt = conn.prepareStatement(sql);
	    	pstmt.setString(1, id);
	    	rs = pstmt.executeQuery();
	    	rs.next();
	    	if(rs.getInt(1) == 1) {
	    		result = true;
	    	}
	    	return result;
	    }catch(Exception e){
	     	System.out.println("아이디 중복 확인 실패 : " + e);
	    } finally {
	    	try {
	    		if(rs != null) rs.close();
	    		if(pstmt != null) pstmt.close();
	    		if(conn != null) conn.close();
	    	} catch(Exception e) {
	    		throw new RuntimeException(e.getMessage());
	    	}
	    }
	    return result;
	}

	// 사용자 등록
	public void insertUser(UserDTO udto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = DBConnection.getConnection();
			
			String sql = "insert into user values(?,?,?,?,?,?)";
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, udto.getUid());
			pstmt.setString(2, udto.getUpw());
			pstmt.setString(3, udto.getUname());
			pstmt.setString(4, udto.getUtel());
			pstmt.setString(5, udto.getUregDate());
			pstmt.setInt(6, udto.getUtok());
			
			pstmt.executeUpdate();
		} catch(Exception e) {
			System.out.println("유저 가입 오류 : " + e);
			e.printStackTrace();
		} finally {
			try {
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch(Exception e) {
				throw new RuntimeException(e.getMessage());
			}
		}
	}

	// 사용자가 선택한 카테고리 등록
	public void addCate(SelectDTO sdto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = DBConnection.getConnection();
			
			String sql = "insert into user_pre(uid, id, area, level, length, time, water, toilet, mart, keyword) values(?,?,?,?,?,?,?,?,?,?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, sdto.getUid());
			pstmt.setInt(2, sdto.getCategory());
			pstmt.setString(3, sdto.getArea());
			pstmt.setInt(4, sdto.getLevel());
			pstmt.setInt(5, sdto.getLength());
			pstmt.setInt(6, sdto.getTime());
			pstmt.setInt(7, sdto.getWater());
			pstmt.setInt(8, sdto.getToilet());
			pstmt.setInt(9, sdto.getMart());
			pstmt.setString(10, sdto.getKeyword());
			pstmt.executeUpdate();
		} catch(Exception e) {
			System.out.println("선택 카테고리 등록 오류 : " + e);
			e.printStackTrace();
		} finally {
			try {
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch(Exception e) {
				throw new RuntimeException(e.getMessage());
			}
		}
	}

	// 코스명으로 카테고리 정보 검색
	public String chkCourse(String course) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		String sql = "select ESNTL_ID from course where WLK_COURS_FLAG_NM=? limit 1";
		
		try {
			conn = DBConnection.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, course);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				String cours = rs.getString(1);
				System.out.println("sql 코스 : " + cours);
				return cours;
			}
		} catch(Exception e) {
			System.out.println("코스 정보 호출 에러");
			e.printStackTrace();
		} finally {
			try {
				if(rs != null) rs.close();
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch (Exception e) {
				throw new RuntimeException(e.getMessage());
			}
		}
		return null;
	}

	// 유저 취향 결과 저장
	public void addPref(SelectDTO dto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "update user_pre set pref=? where uid=? and id=? and area=? and level=? and length=? and time=? and water=? and toilet=? and mart=? and keyword=?";
		
		try {
			conn = DBConnection.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, dto.getPref());
			pstmt.setString(2, dto.getUid());
			pstmt.setInt(3, dto.getCategory());
			pstmt.setString(4, dto.getArea());
			pstmt.setInt(5, dto.getLevel());
			pstmt.setInt(6, dto.getLength());
			pstmt.setInt(7, dto.getTime());
			pstmt.setInt(8, dto.getWater());
			pstmt.setInt(9, dto.getToilet());
			pstmt.setInt(10, dto.getMart());
			pstmt.setString(11, dto.getKeyword());
			
			pstmt.executeUpdate();
			
		} catch(Exception e) {
			System.out.println("취향 결과 저장 오류");
			e.printStackTrace();
		} finally {
			try {
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch(Exception e) {
				throw new RuntimeException(e.getMessage());
			}
		}
	}

	// 사용자 로그인
	public int selectUser(UserDTO dto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int result = 0;
		try {
			conn = DBConnection.getConnection();
			String sql = "select count(*) as cnt from user where id=? and pw=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, dto.getUid());
			pstmt.setString(2, dto.getUpw());
			rs = pstmt.executeQuery();
			while(rs.next()) {
				if(rs.getInt("cnt") == 1) {
					result = 1;
				}
			}
			return result;
			
		} catch (Exception e) {
			System.out.println("로그인 오류");
			e.printStackTrace();
		} finally {
			try {
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch(Exception e) {
				throw new RuntimeException(e.getMessage());
			}
		}
		return result;
	}

	// 유저 정보 호출
	public UserDTO getUserInfo(String id) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = DBConnection.getConnection();
			UserDTO dto = new UserDTO();
			
			String sql = "select * from user where id=?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id);
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				dto.setUid(rs.getString("id"));
				dto.setUpw(rs.getString("pw"));
				dto.setUname(rs.getString("name"));
				dto.setUtel(rs.getString("tel"));
				dto.setUregDate(rs.getString("regDate"));
				dto.setUtok(rs.getInt("tok"));
			}
			System.out.println("dto : " + dto);
			return dto;
		} catch(Exception e) {
			System.out.println("유저 정보 호출 에러");
			e.printStackTrace();
		} finally {
			try {
				if(rs != null) rs.close();
				if(pstmt != null) pstmt.close();
				if(conn != null) conn.close();
			} catch (Exception e) {
				throw new RuntimeException(e.getMessage());
			}
		}
		return null;
	}

}
