package mvc.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import mvc.database.DBConnection;

public class CourseDAO {

	private static CourseDAO instance;
	
	private CourseDAO() {
		
	}

	public static CourseDAO getInstance() {
		if (instance == null)
			instance = new CourseDAO();
		return instance;
	}	
	
	/*
	 * public int getListCount(String items, String text) { // 寃��� 議곌굔 諛� �댁�⑹��
	 * ��寃⑥� Connection conn = null; PreparedStatement pstmt = null; ResultSet rs =
	 * null;
	 * 
	 * int x = 0;
	 * 
	 * String sql;
	 * 
	 * if (items == null && text == null) // 寃��� 議곌굔�� ���쇰㈃ ��泥� ��肄��� 媛��� 異���
	 * sql = "select count(*) from board"; else // 寃��� 議곌굔�� ���쇰㈃ 議곌굔�� 留��� 媛���
	 * 異��� sql = "select count(*) from board where " + items + " like '%" + text +
	 * "%'"; try { conn = DBConnection.getConnection(); pstmt =
	 * conn.prepareStatement(sql); rs = pstmt.executeQuery();
	 * 
	 * if (rs.next()) x = rs.getInt(1);
	 * 
	 * } catch (Exception ex) { System.out.println("getListCount �ㅻ� : " + ex); }
	 * finally { try { if (rs != null) rs.close(); if (pstmt != null) pstmt.close();
	 * if (conn != null) conn.close(); } catch (Exception ex) { throw new
	 * RuntimeException(ex.getMessage()); } } return x; // 理�醫����� ��肄��� 媛��� 異���
	 * }
	 * 
	 * //board ���대��� ��肄��� 媛��몄�ㅺ린 public ArrayList<BoardDTO> getBoardList(int
	 * page, int limit, String items, String text) {
	 * 
	 * Connection conn = null; PreparedStatement pstmt = null; ResultSet rs = null;
	 * 
	 * int total_record = getListCount(items, text); // 議곌굔�� 留��� ��泥� ���� 媛���
	 * int start = (page - 1) * limit; // �대�� ���댁� 寃���臾쇱�� ���� 吏��� int index =
	 * start + 1;
	 * 
	 * 
	 * String sql;
	 * 
	 * if (items == null && text == null) sql =
	 * "select * from board order by num desc"; // 議곌굔�� ���쇰㈃ ��泥� 寃���臾� 以� 理�洹�
	 * 寃���臾쇰��� ������ else sql = "select * from board where " + items + " like '%"
	 * + text + "%' order by num desc"; // 議곌굔�� ���쇰㈃ 議곌굔�� 留��� 寃���臾� 以� 理�洹�
	 * 寃���臾쇰��� ������
	 * 
	 * ArrayList<BoardDTO> list = new ArrayList<BoardDTO>();
	 * 
	 * try { conn = DBConnection.getConnection(); pstmt =
	 * conn.prepareStatement(sql); rs = pstmt.executeQuery();
	 * 
	 * while (rs.absolute(index)) { // �대�� 寃���臾쇱�� 寃������� �ｌ�� BoardDTO board =
	 * new BoardDTO(); board.setNum(rs.getInt("num"));
	 * board.setId(rs.getString("id")); board.setName(rs.getString("name"));
	 * board.setSubject(rs.getString("subject"));
	 * board.setContent(rs.getString("content"));
	 * board.setRegist_day(rs.getString("regist_day"));
	 * board.setHit(rs.getInt("hit")); board.setIp(rs.getString("ip"));
	 * list.add(board);
	 * 
	 * if (index < (start + limit) && index <= total_record) index++; else break; }
	 * return list; } catch (Exception ex) { System.out.println("�곌껐 �ㅻ� : " + ex);
	 * } finally { try { if (rs != null) rs.close(); if (pstmt != null)
	 * pstmt.close(); if (conn != null) conn.close(); } catch (Exception ex) { throw
	 * new RuntimeException(ex.getMessage()); } } return null; }
	 * 
	 * //member ���대����� �몄��� id�� �ъ�⑹��紐� 媛��몄�ㅺ린 public String
	 * getLoginNameById(String id) { Connection conn = null; PreparedStatement pstmt
	 * = null; ResultSet rs = null;
	 * 
	 * String name = null; String sql = "select * from member where id = ?"; //
	 * member ���대����� ���대��媛� �쇱����� �ъ�⑹���� �곗�댄�곕�� 紐⑤�� 媛��몄��
	 * 
	 * try { conn = DBConnection.getConnection(); pstmt =
	 * conn.prepareStatement(sql); pstmt.setString(1, id); rs =
	 * pstmt.executeQuery();
	 * 
	 * if (rs.next()) // 媛��몄�� �곗�댄�곗���� �대��� 李얠�� name�� ���� name =
	 * rs.getString("name"); return name; } catch (Exception ex) {
	 * System.out.println("�대� 媛��몄�ㅺ린 �ㅽ�� : " + ex); } finally { try { if (rs !=
	 * null) rs.close(); if (pstmt != null) pstmt.close(); if (conn != null)
	 * conn.close(); } catch (Exception ex) { throw new
	 * RuntimeException(ex.getMessage()); } } return null; }
	 * 
	 * //board ���대��� ��濡��� 湲� �쎌�� public void insertBoard(BoardDTO board) {
	 * 
	 * Connection conn = null; PreparedStatement pstmt = null; try { conn =
	 * DBConnection.getConnection();
	 * 
	 * String sql = "insert into board values(?, ?, ?, ?, ?, ?, ?, ?)";
	 * 
	 * pstmt = conn.prepareStatement(sql); // 寃��������� �ъ�⑹��媛� ���깊�� �댁�⑹��
	 * ��踰��� 異�媛� pstmt.setInt(1, board.getNum()); pstmt.setString(2,
	 * board.getId()); pstmt.setString(3, board.getName()); pstmt.setString(4,
	 * board.getSubject()); pstmt.setString(5, board.getContent());
	 * pstmt.setString(6, board.getRegist_day()); pstmt.setInt(7, board.getHit());
	 * pstmt.setString(8, board.getIp());
	 * 
	 * pstmt.executeUpdate(); } catch (Exception ex) {
	 * System.out.println("寃����� 湲� ���� �ㅻ� : " + ex); } finally { try { if (pstmt
	 * != null) pstmt.close(); if (conn != null) conn.close(); } catch (Exception
	 * ex) { throw new RuntimeException(ex.getMessage()); } } }
	 * 
	 * // 寃���臾쇱�� 踰��� 媛��몄�ㅺ린 public BoardDTO getBoardByNum(int num, int page) {
	 * Connection conn = null; PreparedStatement pstmt = null; ResultSet rs = null;
	 * BoardDTO board = null;
	 * 
	 * updateHit(num); // 寃���臾쇱�� 議고����瑜� 利�媛����ㅻ�� 硫����� String sql =
	 * "select * from board where num = ?"; // 寃����� DB���� 寃���臾� 踰��몄�� �대�뱁����
	 * �곗�댄�곕�� ��遺� 媛��몄��
	 * 
	 * try { conn = DBConnection.getConnection(); pstmt =
	 * conn.prepareStatement(sql); pstmt.setInt(1, num); rs = pstmt.executeQuery();
	 * 
	 * if (rs.next()) { board = new BoardDTO(); board.setNum(rs.getInt("num"));
	 * board.setId(rs.getString("id")); board.setName(rs.getString("name"));
	 * board.setSubject(rs.getString("subject"));
	 * board.setContent(rs.getString("content"));
	 * board.setRegist_day(rs.getString("regist_day"));
	 * board.setHit(rs.getInt("hit")); board.setIp(rs.getString("ip")); } return
	 * board; } catch (Exception ex) {
	 * System.out.println("寃���臾� �몃��댁�� 媛��몄�ㅺ린 �ㅻ� : " + ex); } finally { try {
	 * if (rs != null) rs.close(); if (pstmt != null) pstmt.close(); if (conn !=
	 * null) conn.close(); } catch (Exception ex) { throw new
	 * RuntimeException(ex.getMessage()); } } return null; }
	 * 
	 * // 議고���� 利�媛� 泥�由� public void updateHit(int num) {
	 * 
	 * Connection conn = null; PreparedStatement pstmt = null; ResultSet rs = null;
	 * 
	 * try { conn = DBConnection.getConnection();
	 * 
	 * // DB���� 寃����� 踰��몄�� �대�뱁���� 議고������ 媛��몄�ㅺ린 String sql =
	 * "select hit from board where num = ?";
	 * 
	 * pstmt = conn.prepareStatement(sql); pstmt.setInt(1, num); rs =
	 * pstmt.executeQuery(); int hit = 0;
	 * 
	 * if (rs.next()) hit = rs.getInt("hit") + 1;
	 * 
	 * // DB���� 寃����� 踰��몄�� �대�뱁���� 議고������ 利�媛� 泥�由� sql =
	 * "update board set hit=? where num=?"; pstmt = conn.prepareStatement(sql);
	 * pstmt.setInt(1, hit); pstmt.setInt(2, num); pstmt.executeUpdate(); } catch
	 * (Exception ex) { System.out.println("議고���� 利�媛� �ㅻ�: " + ex); } finally {
	 * try { if (rs != null) rs.close(); if (pstmt != null) pstmt.close(); if (conn
	 * != null) conn.close(); } catch (Exception ex) { throw new
	 * RuntimeException(ex.getMessage()); } } }
	 * 
	 * // 寃���臾� ���� public void deleteBoard(int num) { Connection conn = null;
	 * PreparedStatement pstmt = null;
	 * 
	 * String sql = "delete from board where num=?";
	 * 
	 * try { conn = DBConnection.getConnection(); pstmt =
	 * conn.prepareStatement(sql); pstmt.setInt(1, num); pstmt.executeUpdate();
	 * 
	 * } catch (Exception ex) { System.out.println("寃����� 湲� ���� �ㅻ� : " + ex); }
	 * finally { try { if (pstmt != null) pstmt.close(); if (conn != null)
	 * conn.close(); } catch (Exception ex) { throw new
	 * RuntimeException(ex.getMessage()); } } }
	 * 
	 * // 寃���臾� ���� public void updateBoard(BoardDTO board) { Connection conn =
	 * null; PreparedStatement pstmt = null;
	 * 
	 * String sql = "update board set name=?, subject=?, content=? where num=?";
	 * 
	 * try { conn = DBConnection.getConnection(); pstmt =
	 * conn.prepareStatement(sql); pstmt.setString(1, board.getName());
	 * pstmt.setString(2, board.getSubject()); pstmt.setString(3,
	 * board.getContent()); pstmt.setInt(4, board.getNum()); pstmt.executeUpdate();
	 * 
	 * } catch(Exception ex) { System.out.println("寃����� 湲� ���� �ㅻ� : " + ex); }
	 * finally { try { if(pstmt != null) pstmt.close(); if(conn != null)
	 * conn.close(); } catch(Exception ex) { throw new
	 * RuntimeException(ex.getMessage()); } } }
	 */
}
